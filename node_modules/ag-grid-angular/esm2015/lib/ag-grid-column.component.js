import * as ɵngcc0 from '@angular/core';
var AgGridColumn_1;
import { __decorate, __metadata, __rest } from "tslib";
import { Component, ContentChildren, Input, QueryList } from "@angular/core";
let AgGridColumn = AgGridColumn_1 = class AgGridColumn {
    hasChildColumns() {
        if (this.childColumns && this.childColumns.length > 0) {
            // necessary because of https://github.com/angular/angular/issues/10098
            return !(this.childColumns.length === 1 && this.childColumns.first === this);
        }
        return false;
    }
    toColDef() {
        let colDef = this.createColDefFromGridColumn(this);
        if (this.hasChildColumns()) {
            colDef["children"] = this.getChildColDefs(this.childColumns);
        }
        return colDef;
    }
    getChildColDefs(childColumns) {
        return childColumns
            // necessary because of https://github.com/angular/angular/issues/10098
            .filter(column => !column.hasChildColumns())
            .map((column) => {
            return column.toColDef();
        });
    }
    createColDefFromGridColumn(from) {
        let { childColumns } = from, colDef = __rest(from, ["childColumns"]);
        return colDef;
    }
};
AgGridColumn.ɵfac = function AgGridColumn_Factory(t) { return new (t || AgGridColumn)(); };
AgGridColumn.ɵcmp = ɵngcc0.ɵɵdefineComponent({ type: AgGridColumn, selectors: [["ag-grid-column"]], contentQueries: function AgGridColumn_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, AgGridColumn_1, false);
    } if (rf & 2) {
        var _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.childColumns = _t);
    } }, inputs: { filterFramework: "filterFramework", filterParams: "filterParams", floatingFilterComponent: "floatingFilterComponent", floatingFilterComponentParams: "floatingFilterComponentParams", floatingFilterComponentFramework: "floatingFilterComponentFramework", floatingFilterFramework: "floatingFilterFramework", filter: "filter", headerName: "headerName", headerValueGetter: "headerValueGetter", headerTooltip: "headerTooltip", headerClass: "headerClass", suppressHeaderKeyboardEvent: "suppressHeaderKeyboardEvent", columnGroupShow: "columnGroupShow", toolPanelClass: "toolPanelClass", suppressColumnsToolPanel: "suppressColumnsToolPanel", suppressFiltersToolPanel: "suppressFiltersToolPanel", tooltipComponent: "tooltipComponent", tooltipComponentFramework: "tooltipComponentFramework", tooltipComponentParams: "tooltipComponentParams", children: "children", groupId: "groupId", openByDefault: "openByDefault", marryChildren: "marryChildren", headerGroupComponent: "headerGroupComponent", headerGroupComponentFramework: "headerGroupComponentFramework", headerGroupComponentParams: "headerGroupComponentParams", colId: "colId", field: "field", type: "type", valueGetter: "valueGetter", valueFormatter: "valueFormatter", refData: "refData", keyCreator: "keyCreator", equals: "equals", tooltipField: "tooltipField", tooltipValueGetter: "tooltipValueGetter", checkboxSelection: "checkboxSelection", icons: "icons", suppressNavigable: "suppressNavigable", suppressKeyboardEvent: "suppressKeyboardEvent", suppressPaste: "suppressPaste", suppressFillHandle: "suppressFillHandle", hide: "hide", initialHide: "initialHide", lockVisible: "lockVisible", lockPosition: "lockPosition", suppressMovable: "suppressMovable", editable: "editable", valueSetter: "valueSetter", valueParser: "valueParser", cellEditor: "cellEditor", cellEditorFramework: "cellEditorFramework", cellEditorParams: "cellEditorParams", cellEditorSelector: "cellEditorSelector", singleClickEdit: "singleClickEdit", newValueHandler: "newValueHandler", cellEditorPopup: "cellEditorPopup", cellEditorPopupPosition: "cellEditorPopupPosition", onCellValueChanged: "onCellValueChanged", onCellClicked: "onCellClicked", onCellDoubleClicked: "onCellDoubleClicked", onCellContextMenu: "onCellContextMenu", getQuickFilterText: "getQuickFilterText", filterValueGetter: "filterValueGetter", floatingFilter: "floatingFilter", headerComponent: "headerComponent", headerComponentFramework: "headerComponentFramework", headerComponentParams: "headerComponentParams", menuTabs: "menuTabs", columnsMenuParams: "columnsMenuParams", suppressMenu: "suppressMenu", headerCheckboxSelection: "headerCheckboxSelection", headerCheckboxSelectionFilteredOnly: "headerCheckboxSelectionFilteredOnly", chartDataType: "chartDataType", pinned: "pinned", initialPinned: "initialPinned", lockPinned: "lockPinned", pinnedRowCellRenderer: "pinnedRowCellRenderer", pinnedRowCellRendererFramework: "pinnedRowCellRendererFramework", pinnedRowCellRendererParams: "pinnedRowCellRendererParams", pinnedRowValueFormatter: "pinnedRowValueFormatter", pivot: "pivot", initialPivot: "initialPivot", pivotIndex: "pivotIndex", initialPivotIndex: "initialPivotIndex", pivotComparator: "pivotComparator", enablePivot: "enablePivot", cellStyle: "cellStyle", cellClass: "cellClass", cellClassRules: "cellClassRules", cellRenderer: "cellRenderer", cellRendererFramework: "cellRendererFramework", cellRendererParams: "cellRendererParams", cellRendererSelector: "cellRendererSelector", autoHeight: "autoHeight", wrapText: "wrapText", enableCellChangeFlash: "enableCellChangeFlash", suppressCellFlash: "suppressCellFlash", rowDrag: "rowDrag", rowDragText: "rowDragText", dndSource: "dndSource", dndSourceOnRowDrag: "dndSourceOnRowDrag", rowGroup: "rowGroup", initialRowGroup: "initialRowGroup", rowGroupIndex: "rowGroupIndex", initialRowGroupIndex: "initialRowGroupIndex", enableRowGroup: "enableRowGroup", enableValue: "enableValue", aggFunc: "aggFunc", initialAggFunc: "initialAggFunc", allowedAggFuncs: "allowedAggFuncs", showRowGroup: "showRowGroup", sortable: "sortable", sort: "sort", initialSort: "initialSort", sortIndex: "sortIndex", initialSortIndex: "initialSortIndex", sortingOrder: "sortingOrder", comparator: "comparator", unSortIcon: "unSortIcon", sortedAt: "sortedAt", colSpan: "colSpan", rowSpan: "rowSpan", width: "width", initialWidth: "initialWidth", minWidth: "minWidth", maxWidth: "maxWidth", flex: "flex", initialFlex: "initialFlex", resizable: "resizable", suppressSizeToFit: "suppressSizeToFit", suppressAutoSize: "suppressAutoSize" }, decls: 0, vars: 0, template: function AgGridColumn_Template(rf, ctx) { }, encapsulation: 2 });
__decorate([
    ContentChildren(AgGridColumn_1),
    __metadata("design:type", QueryList)
], AgGridColumn.prototype, "childColumns", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "filterFramework", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "filterParams", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "floatingFilterComponent", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "floatingFilterComponentParams", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "floatingFilterComponentFramework", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "floatingFilterFramework", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "filter", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], AgGridColumn.prototype, "headerName", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "headerValueGetter", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], AgGridColumn.prototype, "headerTooltip", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "headerClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], AgGridColumn.prototype, "suppressHeaderKeyboardEvent", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], AgGridColumn.prototype, "columnGroupShow", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "toolPanelClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "suppressColumnsToolPanel", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "suppressFiltersToolPanel", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "tooltipComponent", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "tooltipComponentFramework", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "tooltipComponentParams", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], AgGridColumn.prototype, "children", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], AgGridColumn.prototype, "groupId", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "openByDefault", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "marryChildren", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "headerGroupComponent", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "headerGroupComponentFramework", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "headerGroupComponentParams", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], AgGridColumn.prototype, "colId", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], AgGridColumn.prototype, "field", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "type", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "valueGetter", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "valueFormatter", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "refData", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], AgGridColumn.prototype, "keyCreator", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], AgGridColumn.prototype, "equals", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], AgGridColumn.prototype, "tooltipField", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], AgGridColumn.prototype, "tooltipValueGetter", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "checkboxSelection", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "icons", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "suppressNavigable", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], AgGridColumn.prototype, "suppressKeyboardEvent", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "suppressPaste", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "suppressFillHandle", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "hide", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "initialHide", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "lockVisible", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "lockPosition", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "suppressMovable", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "editable", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "valueSetter", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "valueParser", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "cellEditor", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "cellEditorFramework", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "cellEditorParams", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], AgGridColumn.prototype, "cellEditorSelector", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "singleClickEdit", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], AgGridColumn.prototype, "newValueHandler", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "cellEditorPopup", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], AgGridColumn.prototype, "cellEditorPopupPosition", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], AgGridColumn.prototype, "onCellValueChanged", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], AgGridColumn.prototype, "onCellClicked", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], AgGridColumn.prototype, "onCellDoubleClicked", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], AgGridColumn.prototype, "onCellContextMenu", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], AgGridColumn.prototype, "getQuickFilterText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "filterValueGetter", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "floatingFilter", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "headerComponent", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "headerComponentFramework", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "headerComponentParams", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], AgGridColumn.prototype, "menuTabs", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "columnsMenuParams", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "suppressMenu", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "headerCheckboxSelection", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "headerCheckboxSelectionFilteredOnly", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], AgGridColumn.prototype, "chartDataType", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "pinned", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "initialPinned", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "lockPinned", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "pinnedRowCellRenderer", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "pinnedRowCellRendererFramework", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "pinnedRowCellRendererParams", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "pinnedRowValueFormatter", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "pivot", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "initialPivot", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], AgGridColumn.prototype, "pivotIndex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], AgGridColumn.prototype, "initialPivotIndex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], AgGridColumn.prototype, "pivotComparator", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "enablePivot", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "cellStyle", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "cellClass", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "cellClassRules", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "cellRenderer", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "cellRendererFramework", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "cellRendererParams", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], AgGridColumn.prototype, "cellRendererSelector", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "autoHeight", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "wrapText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "enableCellChangeFlash", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "suppressCellFlash", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "rowDrag", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], AgGridColumn.prototype, "rowDragText", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "dndSource", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], AgGridColumn.prototype, "dndSourceOnRowDrag", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "rowGroup", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "initialRowGroup", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], AgGridColumn.prototype, "rowGroupIndex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], AgGridColumn.prototype, "initialRowGroupIndex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "enableRowGroup", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "enableValue", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "aggFunc", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "initialAggFunc", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], AgGridColumn.prototype, "allowedAggFuncs", void 0);
__decorate([
    Input(),
    __metadata("design:type", Object)
], AgGridColumn.prototype, "showRowGroup", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "sortable", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], AgGridColumn.prototype, "sort", void 0);
__decorate([
    Input(),
    __metadata("design:type", String)
], AgGridColumn.prototype, "initialSort", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], AgGridColumn.prototype, "sortIndex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], AgGridColumn.prototype, "initialSortIndex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Array)
], AgGridColumn.prototype, "sortingOrder", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], AgGridColumn.prototype, "comparator", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "unSortIcon", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], AgGridColumn.prototype, "sortedAt", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], AgGridColumn.prototype, "colSpan", void 0);
__decorate([
    Input(),
    __metadata("design:type", Function)
], AgGridColumn.prototype, "rowSpan", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], AgGridColumn.prototype, "width", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], AgGridColumn.prototype, "initialWidth", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], AgGridColumn.prototype, "minWidth", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], AgGridColumn.prototype, "maxWidth", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], AgGridColumn.prototype, "flex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Number)
], AgGridColumn.prototype, "initialFlex", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "resizable", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "suppressSizeToFit", void 0);
__decorate([
    Input(),
    __metadata("design:type", Boolean)
], AgGridColumn.prototype, "suppressAutoSize", void 0);
/*@__PURE__*/ (function () { ɵngcc0.ɵsetClassMetadata(AgGridColumn, [{
        type: Component,
        args: [{
                selector: 'ag-grid-column',
                template: ''
            }]
    }], null, { childColumns: [{
            type: ContentChildren,
            args: [AgGridColumn_1]
        }], filterFramework: [{
            type: Input
        }], filterParams: [{
            type: Input
        }], floatingFilterComponent: [{
            type: Input
        }], floatingFilterComponentParams: [{
            type: Input
        }], floatingFilterComponentFramework: [{
            type: Input
        }], floatingFilterFramework: [{
            type: Input
        }], filter: [{
            type: Input
        }], headerName: [{
            type: Input
        }], headerValueGetter: [{
            type: Input
        }], headerTooltip: [{
            type: Input
        }], headerClass: [{
            type: Input
        }], suppressHeaderKeyboardEvent: [{
            type: Input
        }], columnGroupShow: [{
            type: Input
        }], toolPanelClass: [{
            type: Input
        }], suppressColumnsToolPanel: [{
            type: Input
        }], suppressFiltersToolPanel: [{
            type: Input
        }], tooltipComponent: [{
            type: Input
        }], tooltipComponentFramework: [{
            type: Input
        }], tooltipComponentParams: [{
            type: Input
        }], children: [{
            type: Input
        }], groupId: [{
            type: Input
        }], openByDefault: [{
            type: Input
        }], marryChildren: [{
            type: Input
        }], headerGroupComponent: [{
            type: Input
        }], headerGroupComponentFramework: [{
            type: Input
        }], headerGroupComponentParams: [{
            type: Input
        }], colId: [{
            type: Input
        }], field: [{
            type: Input
        }], type: [{
            type: Input
        }], valueGetter: [{
            type: Input
        }], valueFormatter: [{
            type: Input
        }], refData: [{
            type: Input
        }], keyCreator: [{
            type: Input
        }], equals: [{
            type: Input
        }], tooltipField: [{
            type: Input
        }], tooltipValueGetter: [{
            type: Input
        }], checkboxSelection: [{
            type: Input
        }], icons: [{
            type: Input
        }], suppressNavigable: [{
            type: Input
        }], suppressKeyboardEvent: [{
            type: Input
        }], suppressPaste: [{
            type: Input
        }], suppressFillHandle: [{
            type: Input
        }], hide: [{
            type: Input
        }], initialHide: [{
            type: Input
        }], lockVisible: [{
            type: Input
        }], lockPosition: [{
            type: Input
        }], suppressMovable: [{
            type: Input
        }], editable: [{
            type: Input
        }], valueSetter: [{
            type: Input
        }], valueParser: [{
            type: Input
        }], cellEditor: [{
            type: Input
        }], cellEditorFramework: [{
            type: Input
        }], cellEditorParams: [{
            type: Input
        }], cellEditorSelector: [{
            type: Input
        }], singleClickEdit: [{
            type: Input
        }], newValueHandler: [{
            type: Input
        }], cellEditorPopup: [{
            type: Input
        }], cellEditorPopupPosition: [{
            type: Input
        }], onCellValueChanged: [{
            type: Input
        }], onCellClicked: [{
            type: Input
        }], onCellDoubleClicked: [{
            type: Input
        }], onCellContextMenu: [{
            type: Input
        }], getQuickFilterText: [{
            type: Input
        }], filterValueGetter: [{
            type: Input
        }], floatingFilter: [{
            type: Input
        }], headerComponent: [{
            type: Input
        }], headerComponentFramework: [{
            type: Input
        }], headerComponentParams: [{
            type: Input
        }], menuTabs: [{
            type: Input
        }], columnsMenuParams: [{
            type: Input
        }], suppressMenu: [{
            type: Input
        }], headerCheckboxSelection: [{
            type: Input
        }], headerCheckboxSelectionFilteredOnly: [{
            type: Input
        }], chartDataType: [{
            type: Input
        }], pinned: [{
            type: Input
        }], initialPinned: [{
            type: Input
        }], lockPinned: [{
            type: Input
        }], pinnedRowCellRenderer: [{
            type: Input
        }], pinnedRowCellRendererFramework: [{
            type: Input
        }], pinnedRowCellRendererParams: [{
            type: Input
        }], pinnedRowValueFormatter: [{
            type: Input
        }], pivot: [{
            type: Input
        }], initialPivot: [{
            type: Input
        }], pivotIndex: [{
            type: Input
        }], initialPivotIndex: [{
            type: Input
        }], pivotComparator: [{
            type: Input
        }], enablePivot: [{
            type: Input
        }], cellStyle: [{
            type: Input
        }], cellClass: [{
            type: Input
        }], cellClassRules: [{
            type: Input
        }], cellRenderer: [{
            type: Input
        }], cellRendererFramework: [{
            type: Input
        }], cellRendererParams: [{
            type: Input
        }], cellRendererSelector: [{
            type: Input
        }], autoHeight: [{
            type: Input
        }], wrapText: [{
            type: Input
        }], enableCellChangeFlash: [{
            type: Input
        }], suppressCellFlash: [{
            type: Input
        }], rowDrag: [{
            type: Input
        }], rowDragText: [{
            type: Input
        }], dndSource: [{
            type: Input
        }], dndSourceOnRowDrag: [{
            type: Input
        }], rowGroup: [{
            type: Input
        }], initialRowGroup: [{
            type: Input
        }], rowGroupIndex: [{
            type: Input
        }], initialRowGroupIndex: [{
            type: Input
        }], enableRowGroup: [{
            type: Input
        }], enableValue: [{
            type: Input
        }], aggFunc: [{
            type: Input
        }], initialAggFunc: [{
            type: Input
        }], allowedAggFuncs: [{
            type: Input
        }], showRowGroup: [{
            type: Input
        }], sortable: [{
            type: Input
        }], sort: [{
            type: Input
        }], initialSort: [{
            type: Input
        }], sortIndex: [{
            type: Input
        }], initialSortIndex: [{
            type: Input
        }], sortingOrder: [{
            type: Input
        }], comparator: [{
            type: Input
        }], unSortIcon: [{
            type: Input
        }], sortedAt: [{
            type: Input
        }], colSpan: [{
            type: Input
        }], rowSpan: [{
            type: Input
        }], width: [{
            type: Input
        }], initialWidth: [{
            type: Input
        }], minWidth: [{
            type: Input
        }], maxWidth: [{
            type: Input
        }], flex: [{
            type: Input
        }], initialFlex: [{
            type: Input
        }], resizable: [{
            type: Input
        }], suppressSizeToFit: [{
            type: Input
        }], suppressAutoSize: [{
            type: Input
        }] }); })();
export { AgGridColumn };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,