{"version":3,"file":"ag-grid-column.component.d.ts","sources":["ag-grid-column.component.d.ts"],"names":[],"mappings":"AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA","sourcesContent":["import { CellClassFunc, CellClassRules, CellClickedEvent, CellContextMenuEvent, CellDoubleClickedEvent, CellEditorSelectorFunc, CellRendererSelectorFunc, CellStyle, CellStyleFunc, CheckboxSelectionCallback, ColDef, ColGroupDef, ColSpanParams, ColumnsMenuParams, DndSourceCallback, DndSourceOnRowDragParams, EditableCallback, GetQuickFilterTextParams, HeaderCheckboxSelectionCallback, HeaderClass, HeaderValueGetterFunc, IAggFunc, ICellRendererComp, ICellRendererFunc, IRowDragItem, ITooltipParams, KeyCreatorParams, NewValueParams, RowDragCallback, RowNode, RowSpanParams, SuppressHeaderKeyboardEventParams, SuppressKeyboardEventParams, SuppressNavigableCallback, SuppressPasteCallback, ToolPanelClass, ValueFormatterFunc, ValueGetterFunc, ValueParserFunc, ValueSetterFunc } from \"ag-grid-community\";\nimport { QueryList } from \"@angular/core\";\nexport declare class AgGridColumn {\n    childColumns: QueryList<AgGridColumn>;\n    hasChildColumns(): boolean;\n    toColDef(): ColDef;\n    private getChildColDefs;\n    private createColDefFromGridColumn;\n    filterFramework: any;\n    filterParams: any;\n    floatingFilterComponent: any;\n    floatingFilterComponentParams: any;\n    floatingFilterComponentFramework: any;\n    floatingFilterFramework: any;\n    filter: any;\n    /** The name to render in the column header. If not specified and field is specified, the field name will be used as the header name.     */\n    headerName: string | undefined;\n    /** Function or expression. Gets the value for display in the header.     */\n    headerValueGetter: string | HeaderValueGetterFunc | undefined;\n    /** Tooltip for the column header     */\n    headerTooltip: string | undefined;\n    /** CSS class to use for the header cell. Can be a string, array of strings, or function.     */\n    headerClass: HeaderClass | undefined;\n    /** Suppress the grid taking action for the relevant keyboard event when a header is focused.     */\n    suppressHeaderKeyboardEvent: ((params: SuppressHeaderKeyboardEventParams) => boolean) | undefined;\n    /** Whether to show the column when the group is open / closed.     */\n    columnGroupShow: string | undefined;\n    /** CSS class to use for the tool panel cell. Can be a string, array of strings, or function.     */\n    toolPanelClass: ToolPanelClass | undefined;\n    /** Set to `true` if you do not want this column or group to appear in the Columns Tool Panel. Default: `false`     */\n    suppressColumnsToolPanel: boolean | undefined;\n    /** Set to `true` if you do not want this column (filter) or group (filter group) to appear in the Filters Tool Panel. Default: `false`     */\n    suppressFiltersToolPanel: boolean | undefined;\n    /** Provide your own tooltip component for the column.\n     * See [Tooltip Component](https://www.ag-grid.com/javascript-data-grid/component-tooltip/) for framework specific implementation details.     */\n    tooltipComponent: any;\n    /** @deprecated As of v27, use `tooltipComponent` for framework components too.\n     */\n    tooltipComponentFramework: any;\n    /** The params used to configure `tooltipComponent`.     */\n    tooltipComponentParams: any;\n    /** A list containing a mix of columns and column groups.     */\n    children: (ColDef | ColGroupDef)[] | undefined;\n    /** The unique ID to give the column. This is optional. If missing, a unique ID will be generated. This ID is used to identify the column group in the column API.     */\n    groupId: string | undefined;\n    /** Set to `true` if this group should be opened by default. Default: `false`     */\n    openByDefault: boolean | undefined;\n    /** Set to `true` to keep columns in this group beside each other in the grid. Moving the columns outside of the group (and hence breaking the group) is not allowed. Default: `false`     */\n    marryChildren: boolean | undefined;\n    /** The custom header group component to be used for rendering the component header. If none specified the default AG Grid is used.\n     * See [Header Group Component](https://www.ag-grid.com/javascript-data-grid/component-header/#header-group-components/) for framework specific implementation details.     */\n    headerGroupComponent: any;\n    /** @deprecated As of v27, use `headerGroupComponent` for framework components too.\n     */\n    headerGroupComponentFramework: any;\n    /** The params used to configure the `headerGroupComponent`.     */\n    headerGroupComponentParams: any;\n    /** The unique ID to give the column. This is optional. If missing, the ID will default to the field.\n     * If both field and colId are missing, a unique ID will be generated.\n     * This ID is used to identify the column in the API for sorting, filtering etc.     */\n    colId: string | undefined;\n    /** The field of the row to get the cells data from     */\n    field: string | undefined;\n    /** A comma separated string or array of strings containing `ColumnType` keys which can be used as a template for a column.\n     * This helps to reduce duplication of properties when you have a lot of common column properties.     */\n    type: string | string[] | undefined;\n    /** Function or expression. Gets the value from your data for display.     */\n    valueGetter: string | ValueGetterFunc | undefined;\n    /** A function or expression to format a value, should return a string. Not used for CSV export or copy to clipboard, only for UI cell rendering.     */\n    valueFormatter: string | ValueFormatterFunc | undefined;\n    /** Provided a reference data map to be used to map column values to their respective value from the map.     */\n    refData: {\n        [key: string]: string;\n    } | undefined;\n    /** Function to return a string key for a value.\n     * This string is used for grouping, Set filtering, and searching within cell editor dropdowns.\n     * When filtering and searching the string is exposed to the user, so make sure to return a human-readable value.     */\n    keyCreator: ((params: KeyCreatorParams) => string) | undefined;\n    /** Custom comparator for values, used by renderer to know if values have changed. Cells who's values have not changed don't get refreshed.\n     * By default the grid uses `===` is used which should work for most use cases.     */\n    equals: ((valueA: any, valueB: any) => boolean) | undefined;\n    /** The field of the tooltip to apply to the cell.     */\n    tooltipField: string | undefined;\n    /** Callback that should return the string to use for a tooltip, `tooltipField` takes precedence if set.\n     * If using a custom `tooltipComponent` you may return any custom value to be passed to your tooltip component.     */\n    tooltipValueGetter: ((params: ITooltipParams) => string | any) | undefined;\n    /** `boolean` or `Function`. Set to `true` (or return `true` from function) to render a selection checkbox in the column. Default: `false`     */\n    checkboxSelection: boolean | CheckboxSelectionCallback | undefined;\n    /** Icons to use inside the column instead of the grid's default icons. Leave undefined to use defaults.     */\n    icons: {\n        [key: string]: Function | string;\n    } | undefined;\n    /** Set to `true` if this column is not navigable (i.e. cannot be tabbed into), otherwise `false`.\n     * Can also be a callback function to have different rows navigable.\n     * Default: `false`     */\n    suppressNavigable: boolean | SuppressNavigableCallback | undefined;\n    /** Allows the user to suppress certain keyboard events in the grid cell. Default: `false`     */\n    suppressKeyboardEvent: ((params: SuppressKeyboardEventParams) => boolean) | undefined;\n    /** Pasting is on by default as long as cells are editable (non-editable cells cannot be modified, even with a paste operation).\n     * Set to `true` turn paste operations off.     */\n    suppressPaste: boolean | SuppressPasteCallback | undefined;\n    /** Set to true to prevent the fillHandle from being rendered in any cell that belongs to this column     */\n    suppressFillHandle: boolean | undefined;\n    /** Set to `true` for this column to be hidden. Default: `false`     */\n    hide: boolean | undefined;\n    /** Same as `hide`, except only applied when creating a new column. Not applied when updating column definitions.     */\n    initialHide: boolean | undefined;\n    /** Set to `true` to block making column visible / hidden via the UI (API will still work). Default: `false`     */\n    lockVisible: boolean | undefined;\n    /** Set to `true` to always have this column displayed first. Default: `false`     */\n    lockPosition: boolean | undefined;\n    /** Set to `true` if you do not want this column to be movable via dragging. Default: `false`     */\n    suppressMovable: boolean | undefined;\n    /** Set to `true` if this column is editable, otherwise `false`. Can also be a function to have different rows editable. Default: `false`     */\n    editable: boolean | EditableCallback | undefined;\n    /** Function or expression. Sets the value into your data for saving. Return `true` if the data changed.     */\n    valueSetter: string | ValueSetterFunc | undefined;\n    /** Function or expression. Parses the value for saving.     */\n    valueParser: string | ValueParserFunc | undefined;\n    /** Provide your own cell editor component for this column's cells.\n     * See [Cell Editor](https://www.ag-grid.com/javascript-data-grid/component-cell-editor/) for framework specific implementation detail.     */\n    cellEditor: any;\n    /** @deprecated As of v27, use `cellEditor` for framework components too.\n     */\n    cellEditorFramework: any;\n    /** Params to be passed to the `cellEditor` component.     */\n    cellEditorParams: any;\n    /** Callback to select which cell editor to be used for a given row within the same column.     */\n    cellEditorSelector: CellEditorSelectorFunc | undefined;\n    /** Set to `true` to have cells under this column enter edit mode after single click. Default: `false`     */\n    singleClickEdit: boolean | undefined;\n    /** @deprecated use `valueSetter` instead\n     */\n    newValueHandler: ((params: NewValueParams) => boolean) | undefined;\n    /** Set to `true`, to have the cell editor appear in a popup.     */\n    cellEditorPopup: boolean | undefined;\n    /** Set the position for the popup cell editor. Possible values are\n     *   - `over` Popup will be positioned over the cell\n     *   - `under` Popup will be positioned below the cell leaving the cell value visible.\n     *\n     * Default: `over`.     */\n    cellEditorPopupPosition: string | undefined;\n    /** Callback for after the value of a cell has changed, either due to editing or the application calling `api.setValue()`.     */\n    onCellValueChanged: ((event: NewValueParams) => void) | undefined;\n    /** Callback called when a cell is clicked.     */\n    onCellClicked: ((event: CellClickedEvent) => void) | undefined;\n    /** Callback called when a cell is double clicked.     */\n    onCellDoubleClicked: ((event: CellDoubleClickedEvent) => void) | undefined;\n    /** Callback called when a cell is right clicked.     */\n    onCellContextMenu: ((event: CellContextMenuEvent) => void) | undefined;\n    /** A function to tell the grid what quick filter text to use for this column if you don't want to use the default (which is calling `toString` on the value).     */\n    getQuickFilterText: ((params: GetQuickFilterTextParams) => string) | undefined;\n    /** Function or expression. Gets the value for filtering purposes.     */\n    filterValueGetter: string | ValueGetterFunc | undefined;\n    /** Whether to display a floating filter for this column. Default: `false`     */\n    floatingFilter: boolean | undefined;\n    /**     */\n    /** The custom header component to be used for rendering the component header. If none specified the default AG Grid header component is used.\n         * See [Header Component](https://www.ag-grid.com/javascript-data-grid/component-header/) for framework specific implementation detail.     */\n    headerComponent: any;\n    /** @deprecated As of v27, use `headerComponent` for framework components too.\n     */\n    headerComponentFramework: any;\n    /** The parameters to be passed to the `headerComponent`.     */\n    headerComponentParams: any;\n    /** Set to an array containing zero, one or many of the following options: `'filterMenuTab' | 'generalMenuTab' | 'columnsMenuTab'`.\n     * This is used to figure out which menu tabs are present and in which order the tabs are shown.     */\n    menuTabs: string[] | undefined;\n    /** Params used to change the behaviour and appearance of the Columns Menu tab.     */\n    columnsMenuParams: ColumnsMenuParams | undefined;\n    /** Set to `true` if no menu should be shown for this column header. Default: `false`     */\n    suppressMenu: boolean | undefined;\n    /** If `true` or the callback returns `true`, a 'select all' checkbox will be put into the header.     */\n    headerCheckboxSelection: boolean | HeaderCheckboxSelectionCallback | undefined;\n    /** If `true`, the header checkbox selection will only select filtered items.     */\n    headerCheckboxSelectionFilteredOnly: boolean | undefined;\n    /** Defines the chart data type that should be used for a column.     */\n    chartDataType: 'category' | 'series' | 'time' | 'excluded' | undefined;\n    /** Pin a column to one side: `right` or `left`. A value of `true` is converted to `'left'`.     */\n    pinned: boolean | string | null | undefined;\n    /** Same as `pinned`, except only applied when creating a new column. Not applied when updating column definitions.     */\n    initialPinned: boolean | string | undefined;\n    /** Set to true to block the user pinning the column, the column can only be pinned via definitions or API. Default: `false`     */\n    lockPinned: boolean | undefined;\n    /** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned.\n     */\n    pinnedRowCellRenderer: {\n        new (): ICellRendererComp;\n    } | ICellRendererFunc | string | undefined;\n    /** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned.\n     */\n    pinnedRowCellRendererFramework: any;\n    /** @deprecated Use cellRendererSelector if you want a different Cell Renderer for pinned rows. Check params.node.rowPinned.\n     */\n    pinnedRowCellRendererParams: any;\n    /** @deprecated Use valueFormatter for pinned rows, and check params.node.rowPinned.\n     */\n    pinnedRowValueFormatter: string | ValueFormatterFunc | undefined;\n    /** Set to true to pivot by this column.     */\n    pivot: boolean | undefined;\n    /** Same as `pivot`, except only applied when creating a new column. Not applied when updating column definitions.     */\n    initialPivot: boolean | undefined;\n    /** Set this in columns you want to pivot by.\n     * If only pivoting by one column, set this to any number (e.g. `0`).\n     * If pivoting by multiple columns, set this to where you want this column to be in the order of pivots (e.g. `0` for first, `1` for second, and so on).     */\n    pivotIndex: number | null | undefined;\n    /** Same as `pivotIndex`, except only applied when creating a new column. Not applied when updating column definitions.     */\n    initialPivotIndex: number | undefined;\n    /** Comparator to use when ordering the pivot columns, when this column is used to pivot on.\n     * The values will always be strings, as the pivot service uses strings as keys for the pivot groups.     */\n    pivotComparator: ((valueA: string, valueB: string) => number) | undefined;\n    /** Set to `true` if you want to be able to pivot by this column via the GUI. This will not block the API or properties being used to achieve pivot. Default: `false`     */\n    enablePivot: boolean | undefined;\n    /** An object of css values / or function returning an object of css values for a particular cell.     */\n    cellStyle: CellStyle | CellStyleFunc | undefined;\n    /** Class to use for the cell. Can be string, array of strings, or function that returns a string or array of strings.     */\n    cellClass: string | string[] | CellClassFunc | undefined;\n    /** Rules which can be applied to include certain CSS classes.     */\n    cellClassRules: CellClassRules | undefined;\n    /** Provide your own cell Renderer component for this column's cells.\n     * See [Cell Renderer](https://www.ag-grid.com/javascript-data-grid/component-cell-renderer/) for framework specific implementation details.     */\n    cellRenderer: any;\n    /** @deprecated As of v27, use `cellRenderer` for framework components too.\n     */\n    cellRendererFramework: any;\n    /** Params to be passed to the `cellRenderer` component.     */\n    cellRendererParams: any;\n    /** Callback to select which cell renderer to be used for a given row within the same column.     */\n    cellRendererSelector: CellRendererSelectorFunc | undefined;\n    /** Set to `true` to have the grid calculate the height of a row based on contents of this column. Default: `false`     */\n    autoHeight: boolean | undefined;\n    /** Set to `true` to have the text wrap inside the cell - typically used with `autoHeight`. Default: `false`     */\n    wrapText: boolean | undefined;\n    /** Set to `true` to flash a cell when it's refreshed. Default: `false`     */\n    enableCellChangeFlash: boolean | undefined;\n    /** Set to `true` to prevent this column from flashing on changes. Only applicable if cell flashing is turned on for the grid. Default: `false`     */\n    suppressCellFlash: boolean | undefined;\n    /** `boolean` or `Function`. Set to `true` (or return `true` from function) to allow row dragging. Default: `false`     */\n    rowDrag: boolean | RowDragCallback | undefined;\n    /** A callback that should return a string to be displayed by the `rowDragComp` while dragging a row.\n     * If this callback is not set, the current cell value will be used.     */\n    rowDragText: ((params: IRowDragItem, dragItemCount: number) => string) | undefined;\n    /** `boolean` or `Function`. Set to `true` (or return `true` from function) to allow dragging for native drag and drop. Default: `false`     */\n    dndSource: boolean | DndSourceCallback | undefined;\n    /** Function to allow custom drag functionality for native drag and drop.     */\n    dndSourceOnRowDrag: ((params: DndSourceOnRowDragParams) => void) | undefined;\n    /** Set to `true` to row group by this column. Default: `false`     */\n    rowGroup: boolean | undefined;\n    /** Same as `rowGroup`, except only applied when creating a new column. Not applied when updating column definitions.     */\n    initialRowGroup: boolean | undefined;\n    /** Set this in columns you want to group by.\n     * If only grouping by one column, set this to any number (e.g. `0`).\n     * If grouping by multiple columns, set this to where you want this column to be in the group (e.g. `0` for first, `1` for second, and so on).     */\n    rowGroupIndex: number | null | undefined;\n    /** Same as `rowGroupIndex`, except only applied when creating a new column. Not applied when updating column definitions.     */\n    initialRowGroupIndex: number | undefined;\n    /** Set to `true` if you want to be able to row group by this column via the GUI.\n     * This will not block the API or properties being used to achieve row grouping.\n     * Default: `false`     */\n    enableRowGroup: boolean | undefined;\n    /** Set to `true` if you want to be able to aggregate by this column via the GUI.\n     * This will not block the API or properties being used to achieve aggregation.\n     * Default: `false`     */\n    enableValue: boolean | undefined;\n    /** Name of function to use for aggregation. You can also provide your own agg function.     */\n    aggFunc: string | IAggFunc | null | undefined;\n    /** Same as `aggFunc`, except only applied when creating a new column. Not applied when updating column definitions.     */\n    initialAggFunc: string | IAggFunc | undefined;\n    /** Aggregation functions allowed on this column e.g. `['sum', 'avg']`.\n     * If missing, all installed functions are allowed.\n     * This will only restrict what the GUI allows a user to select, it does not impact when you set a function via the API.     */\n    allowedAggFuncs: string[] | undefined;\n    /** Set to true to have the grid place the values for the group into the cell, or put the name of a grouped column to just show that group.     */\n    showRowGroup: string | boolean | undefined;\n    /** Set to `true` to allow sorting on this column. Default: `false`     */\n    sortable: boolean | undefined;\n    /** If sorting by default, set it here. Set to `asc` or `desc`.     */\n    sort: 'asc' | 'desc' | null | undefined;\n    /** Same as `sort`, except only applied when creating a new column. Not applied when updating column definitions.     */\n    initialSort: 'asc' | 'desc' | null | undefined;\n    /** If sorting more than one column by default, specifies order in which the sorting should be applied.     */\n    sortIndex: number | null | undefined;\n    /** Same as `sortIndex`, except only applied when creating a new column. Not applied when updating column definitions.     */\n    initialSortIndex: number | undefined;\n    /** Array defining the order in which sorting occurs (if sorting is enabled). An array with any of the following in any order `['asc','desc',null]`     */\n    sortingOrder: ('asc' | 'desc' | null)[] | undefined;\n    /** Comparator function for custom sorting.     */\n    comparator: ((valueA: any, valueB: any, nodeA: RowNode, nodeB: RowNode, isInverted: boolean) => number) | undefined;\n    /** Set to `true` if you want the unsorted icon to be shown when no sort is applied to this column. Default: `false`     */\n    unSortIcon: boolean | undefined;\n    /** @deprecated since v24 - use sortIndex instead\n     */\n    sortedAt: number | undefined;\n    /** By default, each cell will take up the width of one column. You can change this behaviour to allow cells to span multiple columns.     */\n    colSpan: ((params: ColSpanParams) => number) | undefined;\n    /** By default, each cell will take up the height of one row. You can change this behaviour to allow cells to span multiple rows.     */\n    rowSpan: ((params: RowSpanParams) => number) | undefined;\n    /** Initial width in pixels for the cell.     */\n    width: number | undefined;\n    /** Same as `width`, except only applied when creating a new column. Not applied when updating column definitions.     */\n    initialWidth: number | undefined;\n    /** Minimum width in pixels for the cell.     */\n    minWidth: number | undefined;\n    /** Maximum width in pixels for the cell.     */\n    maxWidth: number | undefined;\n    /** Used instead of `width` when the goal is to fill the remaining empty space of the grid.     */\n    flex: number | undefined;\n    /** Same as `flex`, except only applied when creating a new column. Not applied when updating column definitions.     */\n    initialFlex: number | undefined;\n    /** Set to `true` to allow this column should be resized. Default: `false`     */\n    resizable: boolean | undefined;\n    /** Set to `true` if you want this column's width to be fixed during 'size to fit' operations. Default: `false`     */\n    suppressSizeToFit: boolean | undefined;\n    /** Set to `true` if you do not want this column to be auto-resizable by double clicking it's edge. Default: `false`     */\n    suppressAutoSize: boolean | undefined;\n    static ngAcceptInputType_suppressCellFlash: boolean | null | '';\n    static ngAcceptInputType_suppressColumnsToolPanel: boolean | null | '';\n    static ngAcceptInputType_suppressFiltersToolPanel: boolean | null | '';\n    static ngAcceptInputType_openByDefault: boolean | null | '';\n    static ngAcceptInputType_marryChildren: boolean | null | '';\n    static ngAcceptInputType_hide: boolean | null | '';\n    static ngAcceptInputType_initialHide: boolean | null | '';\n    static ngAcceptInputType_rowGroup: boolean | null | '';\n    static ngAcceptInputType_initialRowGroup: boolean | null | '';\n    static ngAcceptInputType_pivot: boolean | null | '';\n    static ngAcceptInputType_initialPivot: boolean | null | '';\n    static ngAcceptInputType_checkboxSelection: boolean | null | '';\n    static ngAcceptInputType_headerCheckboxSelection: boolean | null | '';\n    static ngAcceptInputType_headerCheckboxSelectionFilteredOnly: boolean | null | '';\n    static ngAcceptInputType_suppressMenu: boolean | null | '';\n    static ngAcceptInputType_suppressMovable: boolean | null | '';\n    static ngAcceptInputType_lockPosition: boolean | null | '';\n    static ngAcceptInputType_lockVisible: boolean | null | '';\n    static ngAcceptInputType_lockPinned: boolean | null | '';\n    static ngAcceptInputType_unSortIcon: boolean | null | '';\n    static ngAcceptInputType_suppressSizeToFit: boolean | null | '';\n    static ngAcceptInputType_suppressAutoSize: boolean | null | '';\n    static ngAcceptInputType_enableRowGroup: boolean | null | '';\n    static ngAcceptInputType_enablePivot: boolean | null | '';\n    static ngAcceptInputType_enableValue: boolean | null | '';\n    static ngAcceptInputType_editable: boolean | null | '';\n    static ngAcceptInputType_suppressPaste: boolean | null | '';\n    static ngAcceptInputType_suppressNavigable: boolean | null | '';\n    static ngAcceptInputType_enableCellChangeFlash: boolean | null | '';\n    static ngAcceptInputType_rowDrag: boolean | null | '';\n    static ngAcceptInputType_dndSource: boolean | null | '';\n    static ngAcceptInputType_autoHeight: boolean | null | '';\n    static ngAcceptInputType_wrapText: boolean | null | '';\n    static ngAcceptInputType_sortable: boolean | null | '';\n    static ngAcceptInputType_resizable: boolean | null | '';\n    static ngAcceptInputType_singleClickEdit: boolean | null | '';\n    static ngAcceptInputType_floatingFilter: boolean | null | '';\n    static ngAcceptInputType_cellEditorPopup: boolean | null | '';\n    static ngAcceptInputType_suppressFillHandle: boolean | null | '';\n}\n"]}